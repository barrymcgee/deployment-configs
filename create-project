#! /usr/bin/env python3

import re
import yaml
import argparse


class literal(str):
    """Class to support to yaml multi-line string literals"""

    pass


def literal_presenter(dumper, data):
    """Add support to yaml multi-line string literals"""
    return dumper.represent_scalar("tag:yaml.org,2002:str", data, style="|")


# Add representer for multi-line string literals
yaml.add_representer(literal, literal_presenter)


def create_site(domain):
    """Create a new yaml file under the sites folder for this domain"""

    match = re.match(
        r"((?P<subdomain>[\w-]+)\.)?(?P<apex>[\w-]+\.\w+)", domain
    )

    if not match:
        raise Exception(f"{domain} is a weird domain")

    sub = match.group("subdomain")
    apex = match.group("apex")
    name = domain.replace(".", "-")
    staging_domain = f"{sub}.staging.{apex}" if sub else f"staging.{apex}"

    # Yaml data
    data = {"name": name, "domain": domain, "container": {}}

    data["container"]["image"] = (
        "prod-comms.docker-registry.canonical.com/" + name
    )

    data["globalEnvVars"] = "envvars"
    data["useSquid"]: True

    # Add default production nginx config
    data["nginxConfig"] = literal(
        "if ($host != '" + domain + "' ) {\n"
        "  rewrite ^ https://" + domain + "$request_uri? permanent;\n"
        "}\n"
        'more_set_headers "Link: <https://assets.ubuntu.com>; rel=preconnect;'
        'crossorigin, <https://assets.ubuntu.com>; rel=preconnect";\n'
    )

    data["staging"] = {}

    # Include staging name and domain if the staging domain doesn't
    # follow the paconfigttern with just the "staging." prefix
    if sub:
        data["staging"]["name"] = staging_domain.replace(".", "-")
        data["staging"]["domain"] = staging_domain

    # Add default staging nging config
    data["staging"]["nginxConfig"] = literal(
        'more_set_headers "X-Robots-Tag: noindex";\n'
        'more_set_headers "Link: <https://assets.ubuntu.com>; rel=preconnect;'
        ' crossorigin, <https://assets.ubuntu.com>; rel=preconnect";\n'
    )

    # Save file
    with open("./sites/" + name + ".yaml", "w") as file:
        yaml.dump(data, file, default_flow_style=False, sort_keys=False)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Create a basic new yaml file with the values"
    )

    parser.add_argument("domain", type=str, help="Site domain")

    args = parser.parse_args()
    create_site(args.domain)
